From 5ed2b7c6b57e29a3ac83a6639151284c5b644580 Mon Sep 17 00:00:00 2001
From: saixusaixu <sai@DESKTOP-A3UDETP.localdomain>
Date: Sun, 5 Apr 2020 18:39:13 -0400
Subject: [PATCH] Add syscall sx787 group

---
 syscall.c.save | 164 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 sysfile.c      |  30 +++++------
 2 files changed, 177 insertions(+), 17 deletions(-)
 create mode 100644 syscall.c.save

diff --git a/syscall.c.save b/syscall.c.save
new file mode 100644
index 0000000..cff7fa0
--- /dev/null
+++ b/syscall.c.save
@@ -0,0 +1,164 @@
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+#include "x86.h"
+#include "syscall.h"
+
+// User code makes a system call with INT T_SYSCALL.
+// System call number in %eax.
+// Arguments on the stack, from the user call to the C
+// library system call function. The saved user %esp points
+// to a saved program counter, and then the first argument.
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+  if(addr >= proc->sz || addr+4 > proc->sz)
+    return -1;
+  *ip = *(int*)(addr);
+  return 0;
+}
+
+// Fetch the nul-terminated string at addr from the current process.
+// Doesn't actually copy the string - just sets *pp to point at it.
+// Returns length of string, not including nul.
+int
+fetchstr(uint addr, char **pp)
+{
+  char *s, *ep;
+
+  if(addr >= proc->sz)
+    return -1;
+  *pp = (char*)addr;
+  ep = (char*)proc->sz;
+  for(s = *pp; s < ep; s++)
+    if(*s == 0)
+      return s - *pp;
+  return -1;
+}
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+  return fetchint(proc->tf->esp + 4 + 4*n, ip);
+}
+
+// Fetch the nth word-sized system call argument as a pointer
+// to a block of memory of size n bytes.  Check that the pointer
+// lies within the process address space.
+int
+argptr(int n, char **pp, int size)
+{
+  int i;
+  
+  if(argint(n, &i) < 0)
+    return -1;
+  if((uint)i >= proc->sz || (uint)i+size > proc->sz)
+    return -1;
+  *pp = (char*)i;
+  return 0;
+}
+
+// Fetch the nth word-sized system call argument as a string pointer.
+// Check that the pointer is valid and the string is nul-terminated.
+// (There is no shared writable memory, so the string can't change
+// between this check and being used by the kernel.)
+int
+argstr(int n, char **pp)
+{
+  int addr;
+  if(argint(n, &addr) < 0)
+    return -1;
+  return fetchstr(addr, pp);
+}
+
+extern int sys_chdir(void);
+extern int sys_close(void);
+extern int sys_dup(void);
+extern int sys_exec(void);
+extern int sys_exit(void);
+extern int sys_fork(void);
+extern int sys_fstat(void);
+extern int sys_getpid(void);
+extern int sys_kill(void);
+extern int sys_link(void);
+extern int sys_mkdir(void);
+extern int sys_mknod(void);
+extern int sys_open(void);
+extern int sys_pipe(void);
+extern int sys_read(void);
+extern int sys_sbrk(void);
+extern int sys_sleep(void);
+extern int sys_unlink(void);
+extern int sys_wait(void);
+extern int sys_write(void);
+
+extern int sys_uptime(void);
+
+static int (*syscalls[])(void) = {
+[SYS_fork]    sys_fork,
+[SYS_exit]    sys_exit,
+[SYS_wait]    sys_wait,
+[SYS_pipe]    sys_pipe,
+[SYS_read]    sys_read,
+[SYS_kill]    sys_kill,
+[SYS_exec]    sys_exec,
+[SYS_fstat]   sys_fstat,
+[SYS_chdir]   sys_chdir,
+[SYS_dup]     sys_dup,
+[SYS_getpid]  sys_getpid,
+[SYS_sbrk]    sys_sbrk,
+[SYS_sleep]   sys_sleep,
+[SYS_uptime]  sys_uptime,
+[SYS_open]    sys_open,
+[SYS_write]   sys_write,
+[SYS_mknod]   sys_mknod,
+[SYS_unlink]  sys_unlink,
+[SYS_link]    sys_link,
+[SYS_mkdir]   sys_mkdir,
+[SYS_close]   sys_close,
+};
+
+static char syscall_names[][10] = {
+	[SYS_fork]    "fork",
+	[SYS_exit]    "exit",
+	[SYS_wait]    "wait",
+	[SYS_pipe]    "pipe",
+	[SYS_read]    "read",
+	[SYS_kill]    "kill",
+	[SYS_exec]    "exec",
+	[SYS_fstat]   "fstat",
+	[SYS_chdir]   "chdir",
+	[SYS_dup]     "dup",
+	[SYS_getpid]  "getpid",
+	[SYS_sbrk]    "sbrk",
+	[SYS_sleep]   "sleep",
+	[SYS_uptime]  "uptime",
+	[SYS_open]    "open",
+	[SYS_write]   "write",
+	[SYS_mknod]   "mknod",
+	[SYS_unlink]  "unlink",
+	[SYS_link]    "link",
+	[SYS_mkdir]   "mkdir",
+	[SYS_close]   "close"
+};
+void
+syscall(void)
+{
+  int num;
+
+  num = proc->tf->eax;
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    proc->tf->eax = syscalls[num]();
+    cprintf("%s -> %d\n", syscall_names[num], proc->tf->eax);
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            proc->pid, proc->name, num);
+    proc->tf->eax = -1;
+  }
+}
diff --git a/sysfile.c b/sysfile.c
index 2b1b78c..bfb1fe7 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -66,28 +66,24 @@ sys_dup(void)
 int 
 sys_dup2(void)
 {
-	struct file *oldF;
-	struct file *newF;
-	int newFd;
-	if(argfd(0, 0, &oldF)<0){
-		return -1;	
-	}
-	if(argint(1, &newFd)<0){
+	struct file *oldFile;
+	struct file *newFile;
+	int oldFd, newFd;
+	if(argfd(0, &oldFd, &oldFile)< 0){
 		return -1;
 	}
-
-	if(newFd<0 || newFd>=NOFILE){
+	if(argint(1, &newFd)< 0){
 		return -1;
 	}
-
-	if(proc->ofile[newFd]!= 0){
-		if(argfd(1, &newFd, &newF)<0){
-			return -1;
-		}
+	if(newFd== oldFd){
+		return newFd;
 	}
-
-	proc->ofile[newFd]= oldF;
-	filedup(oldF);
+	newFile= proc->ofile[newFd];
+	if(newFile){
+		fileclose(newFile);
+	}
+	proc->ofile[newFd]= oldFile;
+	filedup(oldFile);
 	return newFd;
 }
 
-- 
2.7.4

