From 526e81768e592880adcb5dd8247a35b35ca6cfab Mon Sep 17 00:00:00 2001
From: saixusaixu <sai@DESKTOP-A3UDETP.localdomain>
Date: Sun, 5 Apr 2020 00:19:04 -0400
Subject: [PATCH] add system call

---
 .file.h.swp | Bin 0 -> 1024 bytes
 Makefile    |   1 +
 date.c      |  16 ++++++++++++++++
 syscall.c   |  33 +++++++++++++++++++++++++++++++++
 syscall.h   |   2 ++
 sysfile.c   |  30 ++++++++++++++++++++++++++++++
 sysproc.c   |  11 +++++++++++
 user.h      |   2 ++
 usys.S      |   2 ++
 9 files changed, 97 insertions(+)
 create mode 100644 .file.h.swp
 create mode 100644 date.c

diff --git a/.file.h.swp b/.file.h.swp
new file mode 100644
index 0000000000000000000000000000000000000000..327ddaa3cec6d37e3db5f9e9ecdbaa5a9ddc8299
GIT binary patch
literal 1024
zcmYc?$V<%2S1{5u)iY*50-4+l48@6=NFunIF0R4eA^rinj>e%bt|0+96{cn8r0Qkh
Qlpd8B4S~@RpmPWS0Cr*vc>n+a

literal 0
HcmV?d00001

diff --git a/Makefile b/Makefile
index ea08f3e..51f2021 100644
--- a/Makefile
+++ b/Makefile
@@ -186,6 +186,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_date\
 
 fs.img: mkfs README.md $(UPROGS)
 	./mkfs fs.img README.md $(UPROGS)
diff --git a/date.c b/date.c
new file mode 100644
index 0000000..cd4e647
--- /dev/null
+++ b/date.c
@@ -0,0 +1,16 @@
+#include "types.h"
+#include "user.h"
+#include "date.h"
+
+int
+main(int argc, char *argv[])
+{
+	struct rtcdate r;
+	if (date(&r)) {
+ 		printf(2, "date failed\n");
+ 		exit();
+	}
+	// your code to print the time in any format you like...
+	printf(1,"%d/%d/%d\n", r.month, r.day, r.year);
+ 	exit();
+}
diff --git a/syscall.c b/syscall.c
index 799ebc2..99ccb41 100644
--- a/syscall.c
+++ b/syscall.c
@@ -80,6 +80,7 @@ argstr(int n, char **pp)
 extern int sys_chdir(void);
 extern int sys_close(void);
 extern int sys_dup(void);
+extern int sys_dup2(void);
 extern int sys_exec(void);
 extern int sys_exit(void);
 extern int sys_fork(void);
@@ -98,6 +99,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_date(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -110,6 +112,7 @@ static int (*syscalls[])(void) = {
 [SYS_fstat]   sys_fstat,
 [SYS_chdir]   sys_chdir,
 [SYS_dup]     sys_dup,
+[SYS_dup2]    sys_dup2,
 [SYS_getpid]  sys_getpid,
 [SYS_sbrk]    sys_sbrk,
 [SYS_sleep]   sys_sleep,
@@ -121,8 +124,37 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_date]    sys_date,
 };
 
+
+static char syscall_names[][10] = {
+	[SYS_fork]    "fork",
+	[SYS_exit]    "exit",
+	[SYS_wait]    "wait",
+	[SYS_pipe]    "pipe",
+	[SYS_read]    "read",
+	[SYS_kill]    "kill",
+	[SYS_exec]    "exec",
+	[SYS_fstat]   "fstat",
+	[SYS_chdir]   "chdir",
+	[SYS_dup]     "dup",
+	[SYS_getpid]  "getpid",
+	[SYS_sbrk]    "sbrk",
+	[SYS_sleep]   "sleep",
+	[SYS_uptime]  "uptime",
+	[SYS_open]    "open",
+	[SYS_write]   "write",
+	[SYS_mknod]   "mknod",
+	[SYS_unlink]  "unlink",
+	[SYS_link]    "link",
+	[SYS_mkdir]   "mkdir",
+	[SYS_close]   "close",
+	[SYS_date]    "date",
+	[SYS_dup2]    "dup2",
+};
+
+
 void
 syscall(void)
 {
@@ -131,6 +163,7 @@ syscall(void)
   num = proc->tf->eax;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     proc->tf->eax = syscalls[num]();
+    cprintf("%s -> %d\n", syscall_names[num], proc->tf->eax);
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             proc->pid, proc->name, num);
diff --git a/syscall.h b/syscall.h
index bc5f356..60d4196 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_date   22
+#define SYS_dup2   23
diff --git a/sysfile.c b/sysfile.c
index 2209f6e..2b1b78c 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -63,6 +63,36 @@ sys_dup(void)
   return fd;
 }
 
+int 
+sys_dup2(void)
+{
+	struct file *oldF;
+	struct file *newF;
+	int newFd;
+	if(argfd(0, 0, &oldF)<0){
+		return -1;	
+	}
+	if(argint(1, &newFd)<0){
+		return -1;
+	}
+
+	if(newFd<0 || newFd>=NOFILE){
+		return -1;
+	}
+
+	if(proc->ofile[newFd]!= 0){
+		if(argfd(1, &newFd, &newF)<0){
+			return -1;
+		}
+	}
+
+	proc->ofile[newFd]= oldF;
+	filedup(oldF);
+	return newFd;
+}
+
+
+
 int
 sys_read(void)
 {
diff --git a/sysproc.c b/sysproc.c
index 027a5e5..cdde663 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,14 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_date(void)
+{
+	struct rtcdate *dt;
+	if(argptr(0, (void*)&dt, sizeof(dt))<0){
+		return -1;
+	}
+	cmostime(dt);
+	return 0;
+}
diff --git a/user.h b/user.h
index f45b8d5..0b586d3 100644
--- a/user.h
+++ b/user.h
@@ -19,10 +19,12 @@ int link(char*, char*);
 int mkdir(char*);
 int chdir(char*);
 int dup(int);
+int dup2(int, int);
 int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int date(struct rtcdate*);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..f579e72 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(date)
+SYSCALL(dup2)
-- 
2.7.4

